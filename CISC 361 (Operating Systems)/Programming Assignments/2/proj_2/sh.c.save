//#include "get_path.h"
#include <stdio.h>
#include <string.h>
#include <strings.h>
#include <limits.h>
#include <unistd.h>
#include <stdlib.h>
#include <pwd.h>
#include <dirent.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <signal.h>
#include "sh.h"
#define MAXLINE 128

char cmd[64];
//struct pathelement *p;

int sh( int argc, char **argv, char **envp )
{
  char	buf[MAXLINE];
  pid_t	pid;

  char *ptr;
  char *prompt = calloc(PROMPTMAX, sizeof(char));
  char *commandline = calloc(MAX_CANON, sizeof(char));
  char *command, *arg, *commandpath, *p, *pwd, *owd;
  char **args = calloc(MAXARGS, sizeof(char*));
  int uid, i, status, argsct, go = 1;
  struct passwd *password_entry;
  char *homedir;
  struct pathelement *pathlist;

  uid = getuid();
  password_entry = getpwuid(uid);               /* get passwd info */
  homedir = password_entry->pw_dir;		/* Home directory to start
						  out with*/
     
  if ( (pwd = getcwd(NULL, PATH_MAX+1)) == NULL )
  {
    perror("getcwd");
    exit(2);
  }
  owd = calloc(strlen(pwd) + 1, sizeof(char));
  memcpy(owd, pwd, strlen(pwd));
  prompt[0] = ' '; prompt[1] = '\0';

  /* Put PATH into a linked list */
  pathlist = get_path();

  while ( go )
  {
	ptr = getcwd(NULL, 0);
    	/* print your prompt */
	printf("%s%s", ptr, " >>> ");
    	/* get command line and process */
	while (fgets(buf, MAXLINE, stdin) != NULL) {
		if (buf[strlen(buf) - 1] == '\n')
			buf[strlen(buf) - 1] = 0; /* replace newline with null */

             if (strcmp(buf, "pwd") == 0) {   /* built-in command pwd */
	       printf("Getting Current Working Directory...\n");
               printf("CWD = [%s]\n", ptr);
               //free(ptr);
	     }
	     
		else if(strcmp(buf, "exit") == 0) {
			printf("Exiting Shell...\n");
			exit(0);
	    	}
		
		else if(strcmp(buf, "pid") == 0){
			printf("Getting pid...\n");
			printf("%d\n", getpid());
			
		}

		else if(strcmp(buf, "pathlist") == 0){
			printf("Getting pathlist...\n");
			printf(pathlist);


		}
		
		else {                           /* external command */
			if ((pid = fork()) < 0) {
			printf("fork error\n");
			exit(1);
		} 
		
		else if (pid == 0) {		/* child */
			execlp(buf, buf, (char *)0);
			printf("couldn't execute: %s\n", buf);
			exit(127);
		}

		/* parent */
		if ((pid = waitpid(pid, &status, 0)) < 0)
			printf("waitpid error\n");
             }
	     printf("%s%s", ptr, " >>> ");
	}
    /* check for each built in command and implement */

     /*  else  program to exec */
    {
       /* find it */
       /* do fork(), execve() and waitpid() */

      //else
        //fprintf(stderr, "%s: Command not found.\n", args[0]);
    }
  }
  free(ptr);
  exit(0);
} /* sh() */


char *which(char *command, struct pathelement *pathlist )
{
   /* loop through pathlist until finding command and return it.  Return
   NULL when not found. */

	p = get_path();
  	while (p) {         // WHICH
    	sprintf(cmd, "%s/gcc", p->element);
    	if (access(cmd, X_OK) == 0) {
      	printf("[%s]\n", cmd);
      	break;
    }
    	p = p->next;
  }

} /* which() */

char *where(char *command, struct pathelement *pathlist )
{
  /* similarly loop through finding all locations of command */
	char cmd[64];
  struct pathelement *p;

  p = get_path();
  while (p) {         // WHERE
    sprintf(cmd, "%s/gcc", p->element);
    if (access(cmd, X_OK) == 0)
      printf("[%s]\n", cmd);
    p = p->next;



} /* where() */

void list ( char *dir )
{
  /* see man page for opendir() and readdir() and print out filenames for
  the directory passed */
} /* list() */



